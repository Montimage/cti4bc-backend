"""
Django settings for cti4bc_backend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import Config, RepositoryEnv
import os
from datetime import timedelta
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Configure decouple to look for .env file in the parent directory
ENV_FILE = BASE_DIR.parent / '.env'
if ENV_FILE.exists():
    config = Config(RepositoryEnv(ENV_FILE))
else:
    from decouple import config

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

# Set specific loggers
kafka_logger = logging.getLogger('cti4bc.kafkaConsumer')
kafka_logger.setLevel(logging.DEBUG)

# Set django's logger to WARNING to reduce noise
django_logger = logging.getLogger('django')
django_logger.setLevel(logging.WARNING)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-*fjfub%vj83t@rsw&qltjrk&95ka99bp@%1isjsem(r8e+9^bl')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['cti4bc.dynabic.dev', '0.0.0.0', 'localhost', '127.0.0.1', 'cti4bc-backend.dynabic.dev', 'cti4bc-backend']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'event',
    'organizations',
    'strategies',
    'anonattributes',
    'corsheaders',
    'django_extensions',
    'playbook',
    'public_key',
    'event_files',
    'misp_servers',
    'ip_reputation',
    'forms',
    'reports',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'cti4bc_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cti4bc_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Or specify the allowed origins
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React app address
    'https://cti4bc.dynabic.dev',
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    'https://cti4bc.dynabic.dev',
    'https://cti4bc-backend.dynabic.dev',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Ensure CSRF_COOKIE_SECURE is set to True in production
CSRF_COOKIE_SECURE = True
CORS_ALLOWED_CREDENTIALS = True
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True

MISP_URL = os.environ.get('MISP_URL')
MISP_TOKEN = os.environ.get('MISP_TOKEN')
SSL_CERT_PATH = os.environ.get('SSL_CERT_PATH')
MISP_LIMIT = os.environ.get('MISP_LIMIT', '64')
# Option to disable SSL verification for MISP
MISP_VERIFY_SSL = os.environ.get('MISP_VERIFY_SSL', 'False').lower() == 'true'

FRONTEND_URL = config('FRONTEND_URL')
CTI_REMOTE_TOPIC = config('CTI_REMOTE_TOPIC')
RISK_TOPIC = config('RISK_TOPIC')
KAFKA_SERVER = config('KAFKA_SERVER')
KAFKA_USERNAME = config('KAFKA_USERNAME')
KAFKA_PASSWORD = config('KAFKA_PASSWORD')

# AI/ML Configuration
GEMINI_API_KEY = config('GEMINI_API_KEY', default=None)

# LLM Provider Configuration
# Supports 'gemini' (cloud) or 'ollama' (local/kubernetes)
LLM_PROVIDER = config('LLM_PROVIDER', default='gemini')  # gemini, ollama

# Ollama Configuration
# For local development: http://localhost:11434
# For Kubernetes deployment: http://open-webui-ollama:11434 (or your service name)
OLLAMA_URL = config('OLLAMA_URL', default='http://localhost:11434')
OLLAMA_MODEL = config('OLLAMA_MODEL', default='llama3.1:8b')